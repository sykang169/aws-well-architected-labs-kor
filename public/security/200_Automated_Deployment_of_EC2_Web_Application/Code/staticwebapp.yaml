AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template for a static web app. This template installs a highly-available, scalable web application deployment.
  It demonstrates using the AWS CloudFormation bootstrap scripts to deploy a stateless web application.

  **WARNING** You will be billed for the AWS resources created if you create a stack from this template.

  Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
  
  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  A copy of the License is located at
  
      https://www.apache.org/licenses/LICENSE-2.0
  
  or in the "license" file accompanying this file. This file is distributed 
  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either 
  express or implied. See the License for the specific language governing 
  permissions and limitations under the License.
Parameters:
  #General:
  NamingPrefix:
    Type: String
    Description: The naming prefix for resources created by this template.
    Default: WebApp1
  #Imports:
  VPCImportName:
    Type: String
    Description: 'The CloudFormation name of the VPC stack to import'
    Default: 'WebApp1-VPC'
    MinLength: '3'
    MaxLength: '32'
  VPCImportApp1Instance1Subnet1:
    Type: String
    Description: 'The name of the subnet from VPC stack to import for subnet 1'
    Default: 'App1Subnet1'
  VPCImportApp1Instance1Subnet2:
    Type: String
    Description: 'The name of the subnet from VPC stack to import for subnet 2'
    Default: 'App1Subnet2'
  VPCImportApp1Instance1Subnet3:
    Type: String
    Description: 'The name of the subnet from VPC stack to import for subnet 3'
    Default: 'App1Subnet3'
  VPCImportALB1Subnet1:
    Type: String
    Description: 'The name of the subnet from VPC stack to import'
    Default: 'ALB1Subnet1'
  VPCImportALB1Subnet2:
    Type: String
    Description: 'The name of the subnet from VPC stack to import'
    Default: 'ALB1Subnet2'
  VPCImportALB1Subnet3:
    Type: String
    Description: 'The name of the subnet from VPC stack to import'
    Default: 'ALB1Subnet3'
  #Application Tier
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m5.medium
      - m5.large
    ConstraintDescription: must be a valid EC2 instance type.
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  ALBSGSource:
    Description: The IP address range that can be used to access the web app
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  Web1AutoScaleDesired:
    Default: '2'
    Description: The desired number of web instances in auto scaling group
    Type: Number
    MinValue: '2'
    MaxValue: '6'
    ConstraintDescription: must be between 2 and 6 EC2 instances.
Resources:
  ALB1SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Enable HTTP access via port 80 and 443 to the allowed CIDR
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref ALBSGSource
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref ALBSGSource
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref NamingPrefix
              - Load Balancer
      VpcId:
        Fn::ImportValue: !Sub '${VPCImportName}'
  ALB1LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html
    Properties:
      #IpAddressType:
      # Name: String
      # Scheme: String
      SecurityGroups:
        - Ref: ALB1SecurityGroup
      # SubnetMappings:
      #   - SubnetMapping
      Subnets:
        - Fn::ImportValue: !Sub '${VPCImportName}-${VPCImportALB1Subnet1}'
        - Fn::ImportValue: !Sub '${VPCImportName}-${VPCImportALB1Subnet2}'
        - Fn::ImportValue: !Sub '${VPCImportName}-${VPCImportALB1Subnet3}'
      # Tags:
      #   - Resource Tag
  ALB1Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html
    Properties:
      #  Certificates:
        #- Certificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALB1TargetGroup
      LoadBalancerArn: !Ref ALB1LoadBalancer
      Port: '80'
      Protocol: HTTP
      #SslPolicy: String
  ALB1TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html
    Properties:
      HealthCheckPath: /index.html
      HealthCheckIntervalSeconds: 5
      #HealthCheckPath: 
      #HealthCheckPort: 
      #HealthCheckProtocol:
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 2
      #Name: 
      Port: 80
      Protocol: HTTP
      #Tags:
        #-
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 10
      UnhealthyThresholdCount: 3
      # Targets:
      #   - TargetDescription
      # TargetType: String
      UnhealthyThresholdCount: 3
      VpcId: 
        Fn::ImportValue: !Sub '${VPCImportName}'
  Web1InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Enable HTTP access via port 80 and 443 restricted to the load balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Select 
            - 0
            - !GetAtt 
              - ALB1LoadBalancer
              - SecurityGroups
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: !Select 
            - 0
            - !GetAtt 
              - ALB1LoadBalancer
              - SecurityGroups
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref NamingPrefix
              - Instance
      VpcId:
        Fn::ImportValue: !Sub '${VPCImportName}'
  Web1AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html
    Properties:
      AutoScalingGroupName: !Sub '${NamingPrefix}'
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub '${VPCImportName}-App1Subnet1'
        - Fn::ImportValue: !Sub '${VPCImportName}-App1Subnet2'
        - Fn::ImportValue: !Sub '${VPCImportName}-App1Subnet3'
      LaunchConfigurationName: !Ref Web1LaunchConfig
      MinSize: '1'
      MaxSize: '9'
      DesiredCapacity: !Ref Web1AutoScaleDesired
      TargetGroupARNs:
        - !Ref ALB1TargetGroup
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}'
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
      # AutoScalingRollingUpdate:
      #   MinInstancesInService: '3'
      #   MaxBatchSize: '2'
      #   PauseTime: PT5M
  Web1LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-launchconfig.html
    Properties:
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref Web1InstanceInstanceProfile
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref Web1InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo "Installing Amazon CloudWatch Agent"
          wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          wget https://v2.testwellarchitectedlabs.com/Security/200_Automated_Deployment_of_EC2_Web_Application/Code/amazon-cloudwatch-agent.json -P /opt/aws/amazon-cloudwatch-agent/etc/
          rpm -U ./amazon-cloudwatch-agent.rpm
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s 
          echo "Installing apache httpd"
          yum install -y httpd
          echo "Creating index.html"
          echo "<html>" >> /var/www/html/index.html
          echo "<head>" >> /var/www/html/index.html
          echo "<title>Hello World</title>" >> /var/www/html/index.html
          echo "</head>" >> /var/www/html/index.html
          echo "<body>" >> /var/www/html/index.html
          echo "<h1>Hello World from " >> /var/www/html/index.html
          curl http://169.254.169.254/latest/meta-data/instance-id >> /var/www/html/index.html
          echo "</h1>" >> /var/www/html/index.html
          echo "</body>" >> /var/www/html/index.html
          echo "</html>" >> /var/www/html/index.html
          chmod 644 /var/www/html/index.html
          chown root /var/www/html/index.html
          chgrp wheel /var/www/html/index.html
          echo "Starting httpd..."
          service httpd start
          chkconfig httpd on
          echo "Updating Amazon ssm agent..."
          yum update amazon-ssm-agent -y
          echo "UserData Complete"
  Web1InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${NamingPrefix}-EC2'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      #To simplify management of the role we will use inline policies: https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html
      Policies:
        - PolicyName: ec2
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstanceStatus'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ec2:DescribeTags'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ec2:DescribeVolumes'
                Resource: '*'
        - PolicyName: cloudwatch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 'logs:CreateLogGroup'
                Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${NamingPrefix}*'
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                Resource: '*'
              - Effect: Allow
                Action: 
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogStreams'
                Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${NamingPrefix}*'
              - Effect: Allow
                Action: 
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${NamingPrefix}*:log-stream:*'
        - PolicyName: ssm-s3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 's3:GetObject'
                Resource:
                - !Sub 'arn:aws:s3:::aws-ssm-${AWS::Region}/*'
                - !Sub 'arn:aws:s3:::aws-windows-downloads-${AWS::Region}/*'
                - !Sub 'arn:aws:s3:::amazon-ssm-${AWS::Region}/*'
                - !Sub 'arn:aws:s3:::amazon-ssm-packages-${AWS::Region}/*'
                - !Sub 'arn:aws:s3:::${AWS::Region}-birdwatcher-prod/*'
                - !Sub 'arn:aws:s3:::patch-baseline-snapshot-${AWS::Region}/*'
        - PolicyName: ssm
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:GetDeployablePatchSnapshotForInstance'
                  - 'ssm:GetManifest'
                  - 'ssm:ListAssociations'
                  - 'ssm:ListInstanceAssociations'
                  - 'ssm:PutInventory'
                  - 'ssm:PutComplianceItems'
                  - 'ssm:PutConfigurePackageResult'
                  - 'ssm:UpdateInstanceAssociationStatus'
                  - 'ssm:UpdateInstanceInformation'
                  - 'ssmmessages:CreateControlChannel'
                  - 'ssmmessages:CreateDataChannel'
                  - 'ssmmessages:OpenControlChannel'
                  - 'ssmmessages:OpenDataChannel'
                Resource: '*'
              - Effect: Allow
                Action: 
                  - 'ssm:DescribeAssociation'
                  - 'ssm:GetDocument'
                  - 'ssm:DescribeDocument'
                  - 'ssm:UpdateAssociationStatus'
                Resource: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/*'
              - Effect: Allow
                Action: 
                  - 'ssm:GetParameters'
                Resource: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
        - PolicyName: ec2messages
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 'ec2messages:AcknowledgeMessage'
                  - 'ec2messages:DeleteMessage'
                  - 'ec2messages:FailMessage'
                  - 'ec2messages:GetEndpoint'
                  - 'ec2messages:GetMessages'
                  - 'ec2messages:SendReply'
                Resource: '*'
        #Allow secrets manager for future use
        # - PolicyName: Web1InstanceSecretsManager
        #   PolicyDocument:
        #     Version: 2012-10-17
        #     Statement:
        #       - Effect: Allow
        #         Action: 'secretsmanager:GetSecretValue'
        #         Resource:
  Web1InstanceInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /Web1InstanceEc2Role/
      Roles:
        - !Ref Web1InstanceRole
Outputs:
  WebsiteURL:
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt 
          - ALB1LoadBalancer
          - DNSName
        - /index.html
    Description: Static Website
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "General Configuration"
        Parameters: 
          - NamingPrefix
      - 
        Label: 
          default: "VPC Stack Imports"
        Parameters: 
          - VPCImportName
          - VPCImportApp1Instance1Subnet1
          - VPCImportApp1Instance1Subnet2
          - VPCImportApp1Instance1Subnet3
          - VPCImportALB1Subnet1
          - VPCImportALB1Subnet2
          - VPCImportALB1Subnet3
      - 
        Label: 
          default: "Application Tier Configuration"
        Parameters:
          - LatestAmiId
          - InstanceType
          - Web1AutoScaleDesired
          - ALBSGSource
