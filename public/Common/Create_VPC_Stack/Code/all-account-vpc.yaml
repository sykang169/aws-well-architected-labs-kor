---
Resources:
  VPCB9E5F0B4:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: WellArchitectedLabsStack/VPC
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/Resource
  VPCPublicSubnet1SubnetB4246D30:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      MapPublicIpOnLaunch: true
      Tags:
      - Key: aws-cdk:subnet-name
        Value: Public
      - Key: aws-cdk:subnet-type
        Value: Public
      - Key: Name
        Value: WellArchitectedLabsStack/VPC/PublicSubnet1
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/PublicSubnet1/Subnet
  VPCPublicSubnet1RouteTableFEE4B781:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
      - Key: Name
        Value: WellArchitectedLabsStack/VPC/PublicSubnet1
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/PublicSubnet1/RouteTable
  VPCPublicSubnet1RouteTableAssociation0B0896DC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPublicSubnet1RouteTableFEE4B781
      SubnetId:
        Ref: VPCPublicSubnet1SubnetB4246D30
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/PublicSubnet1/RouteTableAssociation
  VPCPublicSubnet1DefaultRoute91CEF279:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCPublicSubnet1RouteTableFEE4B781
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
    DependsOn:
    - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/PublicSubnet1/DefaultRoute
  VPCPublicSubnet1EIP6AD938E8:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: WellArchitectedLabsStack/VPC/PublicSubnet1
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/PublicSubnet1/EIP
  VPCPublicSubnet1NATGatewayE0556630:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - VPCPublicSubnet1EIP6AD938E8
        - AllocationId
      SubnetId:
        Ref: VPCPublicSubnet1SubnetB4246D30
      Tags:
      - Key: Name
        Value: WellArchitectedLabsStack/VPC/PublicSubnet1
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/PublicSubnet1/NATGateway
  VPCPublicSubnet2Subnet74179F39:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
        - 2
        - Fn::GetAZs: ''
      MapPublicIpOnLaunch: true
      Tags:
      - Key: aws-cdk:subnet-name
        Value: Public
      - Key: aws-cdk:subnet-type
        Value: Public
      - Key: Name
        Value: WellArchitectedLabsStack/VPC/PublicSubnet2
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/PublicSubnet2/Subnet
  VPCPublicSubnet2RouteTable6F1A15F1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
      - Key: Name
        Value: WellArchitectedLabsStack/VPC/PublicSubnet2
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/PublicSubnet2/RouteTable
  VPCPublicSubnet2RouteTableAssociation5A808732:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPublicSubnet2RouteTable6F1A15F1
      SubnetId:
        Ref: VPCPublicSubnet2Subnet74179F39
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/PublicSubnet2/RouteTableAssociation
  VPCPublicSubnet2DefaultRouteB7481BBA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCPublicSubnet2RouteTable6F1A15F1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
    DependsOn:
    - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/PublicSubnet2/DefaultRoute
  VPCPublicSubnet2EIP4947BC00:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: WellArchitectedLabsStack/VPC/PublicSubnet2
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/PublicSubnet2/EIP
  VPCPublicSubnet2NATGateway3C070193:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - VPCPublicSubnet2EIP4947BC00
        - AllocationId
      SubnetId:
        Ref: VPCPublicSubnet2Subnet74179F39
      Tags:
      - Key: Name
        Value: WellArchitectedLabsStack/VPC/PublicSubnet2
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/PublicSubnet2/NATGateway
  VPCPrivateSubnet1Subnet8BCA10E0:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      MapPublicIpOnLaunch: false
      Tags:
      - Key: aws-cdk:subnet-name
        Value: Private
      - Key: aws-cdk:subnet-type
        Value: Private
      - Key: Name
        Value: WellArchitectedLabsStack/VPC/PrivateSubnet1
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/PrivateSubnet1/Subnet
  VPCPrivateSubnet1RouteTableBE8A6027:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
      - Key: Name
        Value: WellArchitectedLabsStack/VPC/PrivateSubnet1
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/PrivateSubnet1/RouteTable
  VPCPrivateSubnet1RouteTableAssociation347902D1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet1RouteTableBE8A6027
      SubnetId:
        Ref: VPCPrivateSubnet1Subnet8BCA10E0
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/PrivateSubnet1/RouteTableAssociation
  VPCPrivateSubnet1DefaultRouteAE1D6490:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet1RouteTableBE8A6027
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VPCPublicSubnet1NATGatewayE0556630
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/PrivateSubnet1/DefaultRoute
  VPCPrivateSubnet2SubnetCFCDAA7A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
        - 2
        - Fn::GetAZs: ''
      MapPublicIpOnLaunch: false
      Tags:
      - Key: aws-cdk:subnet-name
        Value: Private
      - Key: aws-cdk:subnet-type
        Value: Private
      - Key: Name
        Value: WellArchitectedLabsStack/VPC/PrivateSubnet2
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/PrivateSubnet2/Subnet
  VPCPrivateSubnet2RouteTable0A19E10E:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
      - Key: Name
        Value: WellArchitectedLabsStack/VPC/PrivateSubnet2
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/PrivateSubnet2/RouteTable
  VPCPrivateSubnet2RouteTableAssociation0C73D413:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet2RouteTable0A19E10E
      SubnetId:
        Ref: VPCPrivateSubnet2SubnetCFCDAA7A
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/PrivateSubnet2/RouteTableAssociation
  VPCPrivateSubnet2DefaultRouteF4F5CFD2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet2RouteTable0A19E10E
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VPCPublicSubnet2NATGateway3C070193
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/PrivateSubnet2/DefaultRoute
  VPCIGWB7E252D3:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: WellArchitectedLabsStack/VPC
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/IGW
  VPCVPCGW99B986DC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      InternetGatewayId:
        Ref: VPCIGWB7E252D3
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/VPCGW
  VPCFlowLogIAMRole5B117089:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: vpc-flow-logs.amazonaws.com
        Version: '2012-10-17'
      Tags:
      - Key: Name
        Value: WellArchitectedLabsStack/VPC
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/FlowLog/IAMRole/Resource
  VPCFlowLogIAMRoleDefaultPolicyC7E244A8:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          - logs:DescribeLogStreams
          Effect: Allow
          Resource:
            Fn::GetAtt:
            - VPCFlowLogLogGroup03CD7A70
            - Arn
        - Action: iam:PassRole
          Effect: Allow
          Resource:
            Fn::GetAtt:
            - VPCFlowLogIAMRole5B117089
            - Arn
        Version: '2012-10-17'
      PolicyName: VPCFlowLogIAMRoleDefaultPolicyC7E244A8
      Roles:
      - Ref: VPCFlowLogIAMRole5B117089
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/FlowLog/IAMRole/DefaultPolicy/Resource
  VPCFlowLogLogGroup03CD7A70:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 731
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/FlowLog/LogGroup/Resource
  VPCFlowLog260B0A6D:
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceId:
        Ref: VPCB9E5F0B4
      ResourceType: VPC
      TrafficType: ALL
      DeliverLogsPermissionArn:
        Fn::GetAtt:
        - VPCFlowLogIAMRole5B117089
        - Arn
      LogDestinationType: cloud-watch-logs
      LogGroupName:
        Ref: VPCFlowLogLogGroup03CD7A70
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/VPC/FlowLog/FlowLog
  DatabaseSecurityGroup7319C0F6:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ssh access to db instances
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        Description: Allow all outbound traffic by default
        IpProtocol: "-1"
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        Description: from 0.0.0.0/0:3306
        FromPort: 3306
        IpProtocol: tcp
        ToPort: 3306
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/DatabaseSecurityGroup/Resource
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0bd7691bf6470fe9c
      InstanceType:
        Fn::FindInMap:
        - instancesTypes
        - Prod
        - INST
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash -ex\n"
            - 'yum install -y aws-cli

'
      KeyName:
        Ref: KeyName
      EbsOptimized:
        Fn::FindInMap:
        - AWSInstanceType2EBSOpt
        - Fn::FindInMap:
          - instancesTypes
          - Demo
          - INST
        - EBSOpt
      NetworkInterfaces:
      - SubnetId:
          Ref: VPCPublicSubnet2Subnet74179F39
        GroupSet:
        - Ref: BastionhostSG
        AssociatePublicIpAddress: 'true'
        DeviceIndex: '0'
      Tags:
      - Key: Name
        Value: BastionHost
      - Key: EnvironmentType
        Value: Development
  DatabaseSecurityGroupfrom00000IndirectPort16BA9BCA:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0
      Description: from 0.0.0.0/0:{IndirectPort}
      FromPort:
        Fn::GetAtt:
        - ClusterC1063A87
        - Endpoint.Port
      GroupId:
        Fn::GetAtt:
        - DatabaseSecurityGroup7319C0F6
        - GroupId
      ToPort:
        Fn::GetAtt:
        - ClusterC1063A87
        - Endpoint.Port
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/DatabaseSecurityGroup/from 0.0.0.0_0:{IndirectPort}
  ASGInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: WellArchitectedLabsStack/ASG/InstanceSecurityGroup
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        Description: Allow all outbound traffic by default
        IpProtocol: "-1"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/ASG/InstanceSecurityGroup/Resource
  BastionhostSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable 22 ssh port
      VpcId:
        Ref: VPCB9E5F0B4
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: BastionhostSG
  ASGInstanceSecurityGroupfromWellArchitectedLabsStackLBSecurityGroup4680CF06806E968CDE:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 80
      GroupId:
        Fn::GetAtt:
        - ASGInstanceSecurityGroup
        - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
        - LBSecurityGroup8A41EA2B
        - GroupId
      ToPort: 80
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/ASG/InstanceSecurityGroup/from WellArchitectedLabsStackLBSecurityGroup4680CF06:80
  ASGInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
              Fn::Join:
              - ''
              - - ec2.
                - Ref: AWS::URLSuffix
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonRDSReadOnlyAccess
      Tags:
      - Key: Name
        Value: WellArchitectedLabsStack/ASG
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/ASG/InstanceRole/Resource
  ASGInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Ref: ASGInstanceRole
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/ASG/InstanceProfile
  ASGLaunchConfigC00AF12B:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0bd7691bf6470fe9c
      InstanceType: t2.micro
      IamInstanceProfile:
        Ref: ASGInstanceProfile
      SecurityGroups:
      - Fn::GetAtt:
        - ASGInstanceSecurityGroup
        - GroupId
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#include https://sykang-productionapp.s3-us-west-2.amazonaws.com/bootstrap_rds_new.sh"
      KeyName:
        Ref: KeyName
    DependsOn:
    - ASGInstanceRole
    - ClusterC1063A87
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/ASG/LaunchConfig
  ASG46ED3070:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: '4'
      MinSize: '2'
      LaunchConfigurationName:
        Ref: ASGLaunchConfigC00AF12B
      Tags:
      - Key: Name
        PropagateAtLaunch: true
        Value: WellArchitectedLabsStack/ASG
      - Key: Workload
        PropagateAtLaunch: true
        Value:
          Ref: WorkloadName
      - Key: Patch Group
        PropagateAtLaunch: true
        Value: Critical
      - Key: Environment
        PropagateAtLaunch: true
        Value: MasterAccount
      TargetGroupARNs:
      - Ref: LBListenerTargetGroupF04FCF6D
      VPCZoneIdentifier:
      - Ref: VPCPrivateSubnet1Subnet8BCA10E0
      - Ref: VPCPrivateSubnet2SubnetCFCDAA7A
    UpdatePolicy:
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/ASG/ASG
  CURmaster:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
        - "-"
        - - curmaster-war-workshop-
          - Ref: AWS::AccountId
          - Ref: AWS::Region
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  ASGScalingPolicyAModestLoadC5714E5A:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName:
        Ref: ASG46ED3070
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel:
            Fn::Join:
            - ''
            - - Fn::Select:
                - 1
                - Fn::Split:
                  - "/"
                  - Ref: LBListener49E825B4
              - "/"
              - Fn::Select:
                - 2
                - Fn::Split:
                  - "/"
                  - Ref: LBListener49E825B4
              - "/"
              - Fn::Select:
                - 3
                - Fn::Split:
                  - "/"
                  - Ref: LBListener49E825B4
              - "/"
              - Fn::GetAtt:
                - LBListenerTargetGroupF04FCF6D
                - TargetGroupFullName
        TargetValue: 1
    DependsOn:
    - LBListener49E825B4
    - LBListenerTargetGroupF04FCF6D
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/ASG/ScalingPolicyAModestLoad/Resource
  LB8A12904C:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - Fn::GetAtt:
        - LBSecurityGroup8A41EA2B
        - GroupId
      Subnets:
      - Ref: VPCPublicSubnet1SubnetB4246D30
      - Ref: VPCPublicSubnet2Subnet74179F39
      Type: application
    DependsOn:
    - VPCPublicSubnet1DefaultRoute91CEF279
    - VPCPublicSubnet2DefaultRouteB7481BBA
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/LB/Resource
  LBSecurityGroup8A41EA2B:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB WellArchitectedLabsStackLB19E5761A
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        Description: Allow from anyone on port 80
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      - CidrIp: 0.0.0.0/0
        Description: Allow from anyone on port 443
        FromPort: 443
        IpProtocol: tcp
        ToPort: 443
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/LB/SecurityGroup/Resource
  LBSecurityGrouptoWellArchitectedLabsStackASGInstanceSecurityGroup9D3F452F80F1FEE5A2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
        - LBSecurityGroup8A41EA2B
        - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
        - ASGInstanceSecurityGroup
        - GroupId
      FromPort: 80
      ToPort: 80
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/LB/SecurityGroup/to WellArchitectedLabsStackASGInstanceSecurityGroup9D3F452F:80
  LBListener49E825B4:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - TargetGroupArn:
          Ref: LBListenerTargetGroupF04FCF6D
        Type: forward
      LoadBalancerArn:
        Ref: LB8A12904C
      Port: 80
      Protocol: HTTP
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/LB/Listener/Resource
  LBListenerTargetGroupF04FCF6D:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: instance
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: true
      - Key: stickiness.lb_cookie.duration_seconds
        Value: 60
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/LB/Listener/TargetGroup/Resource
  InstanceSubnetGroupF2CBA54F:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for Instance database
      SubnetIds:
      - Ref: VPCPrivateSubnet1Subnet8BCA10E0
      - Ref: VPCPrivateSubnet2SubnetCFCDAA7A
    Metadata:
      aws:cdk:path: WellArchitectedLabsStack/Instance/SubnetGroup
  ClusterC1063A87: 
    Properties: 
      DBClusterParameterGroupName: 
        Ref: RDSDBClusterParameterGroup
      DBSubnetGroupName: 
        Ref: InstanceSubnetGroupF2CBA54F
      Engine: aurora
      DatabaseName: rdscluster
      MasterUserPassword: 
        "awspassword"
      MasterUsername: 
        "awsuser"
      DBClusterIdentifier: wellarchitecteddbinstance  
      VpcSecurityGroupIds:
        - Fn::GetAtt:
          - DatabaseSecurityGroup7319C0F6
          - GroupId
    Type: "AWS::RDS::DBCluster"
  RDSDBClusterParameterGroup: 
    Properties: 
      Description: "CloudFormation Sample Aurora Cluster Parameter Group"
      Family: aurora5.6
      Parameters: 
        time_zone: US/Eastern
    Type: "AWS::RDS::DBClusterParameterGroup"
  RDSDBInstance1: 
    Properties: 
      DBClusterIdentifier: 
        Ref: ClusterC1063A87
      DBInstanceClass: db.r3.xlarge
      DBParameterGroupName: 
        Ref: RDSDBParameterGroup
      DBSubnetGroupName: 
        Ref: InstanceSubnetGroupF2CBA54F
      Engine: aurora
      PubliclyAccessible: "false"
    Type: "AWS::RDS::DBInstance"
  RDSDBInstance2: 
    Properties: 
      DBClusterIdentifier: 
        Ref: ClusterC1063A87
      DBInstanceClass: db.r3.xlarge
      DBParameterGroupName: 
        Ref: RDSDBParameterGroup
      DBSubnetGroupName: 
        Ref: InstanceSubnetGroupF2CBA54F
      Engine: aurora
      PubliclyAccessible: "false"
    Type: "AWS::RDS::DBInstance"
  RDSDBParameterGroup: 
    Properties: 
      Description: "CloudFormation Sample Aurora Parameter Group"
      Family: aurora5.6
      Parameters: 
        sql_mode: IGNORE_SPACE
    Type: "AWS::RDS::DBParameterGroup"
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=1.42.1,@aws-cdk/assets=1.42.1,@aws-cdk/aws-autoscaling=1.42.1,@aws-cdk/aws-autoscaling-common=1.42.1,@aws-cdk/aws-cloudwatch=1.42.1,@aws-cdk/aws-ec2=1.42.1,@aws-cdk/aws-elasticloadbalancingv2=1.42.1,@aws-cdk/aws-events=1.42.1,@aws-cdk/aws-iam=1.42.1,@aws-cdk/aws-kms=1.42.1,@aws-cdk/aws-lambda=1.42.1,@aws-cdk/aws-logs=1.42.1,@aws-cdk/aws-rds=1.42.1,@aws-cdk/aws-s3=1.42.1,@aws-cdk/aws-s3-assets=1.42.1,@aws-cdk/aws-sam=1.42.1,@aws-cdk/aws-secretsmanager=1.42.1,@aws-cdk/aws-sqs=1.42.1,@aws-cdk/aws-ssm=1.42.1,@aws-cdk/cdk-assets-schema=1.42.1,@aws-cdk/cloud-assembly-schema=1.42.1,@aws-cdk/core=1.42.1,@aws-cdk/cx-api=1.42.1,@aws-cdk/region-info=1.42.1,jsii-runtime=node.js/v12.12.0
    Condition: CDKMetadataAvailable
Mappings:
  VPCIpSpace:
    us-east-1:
      RANGE: '10.42'
    us-east-2:
      RANGE: '10.43'
    us-west-2:
      RANGE: '10.42'
    us-west-1:
      RANGE: '10.43'
    ap-northeast-1:
      RANGE: '10.42'
    ap-northeast-2:
      RANGE: '10.43'
    ap-south-1:
      RANGE: '10.44'
    ap-southeast-1:
      RANGE: '10.42'
    ap-southeast-2:
      RANGE: '10.43'
    ca-central-1:
      RANGE: '10.42'
    eu-central-1:
      RANGE: '10.42'
    eu-west-1:
      RANGE: '10.42'
    eu-west-2:
      RANGE: '10.43'
    sa-east-1:
      RANGE: '10.42'
  SubnetTypeIpRanges:
    public:
      RANGE: 0.0/17
  publicSubnetConfig:
    publicSubnet01:
      CIDR: 10.0/24
    publicSubnet02:
      CIDR: 11.0/24
  instancesTypes:
    Demo:
      INST: t2.small
    Prod:
      INST: t2.2xlarge
  AWSInstanceType2Virt:
    t2.small:
      Virt: HVM64
  AWSInstanceType2EBSOpt:
    t2.small:
      EBSOpt: 'false'
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0ff8a91507f77f867
      HVMG2: ami-0a584ac55a7631c0c
    us-west-2:
      HVM64: ami-a0cfeed8
      HVMG2: ami-0e09505bc235aa82d
    us-west-1:
      HVM64: ami-0bdb828fd58c52235
      HVMG2: ami-066ee5fd4a9ef77f1
    eu-west-1:
      HVM64: ami-047bb4163c506cd98
      HVMG2: ami-0a7c483d527806435
    eu-west-2:
      HVM64: ami-f976839e
      HVMG2: NOT_SUPPORTED
    eu-west-3:
      HVM64: ami-0ebc281c20e89ba4b
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      HVM64: ami-0233214e13e500f77
      HVMG2: ami-06223d46a6d0661c7
    ap-northeast-1:
      HVM64: ami-06cd52961ce9f0d85
      HVMG2: ami-053cdd503598e4a9d
    ap-northeast-2:
      HVM64: ami-0a10b2721688ce9d2
      HVMG2: NOT_SUPPORTED
    ap-northeast-3:
      HVM64: ami-0d98120a9fb693f07
      HVMG2: NOT_SUPPORTED
    ap-southeast-1:
      HVM64: ami-08569b978cc4dfa10
      HVMG2: ami-0be9df32ae9f92309
    ap-southeast-2:
      HVM64: ami-09b42976632b27e9b
      HVMG2: ami-0a9ce9fecc3d1daf8
    ap-south-1:
      HVM64: ami-0912f71e06545ad88
      HVMG2: ami-097b15e89dbdcfcf4
    us-east-2:
      HVM64: ami-0b59bfac6be064b78
      HVMG2: NOT_SUPPORTED
    ca-central-1:
      HVM64: ami-0b18956f
      HVMG2: NOT_SUPPORTED
    sa-east-1:
      HVM64: ami-07b14488da8ea02a0
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      HVM64: ami-0a4eaf6c4454eda75
      HVMG2: NOT_SUPPORTED
    cn-northwest-1:
      HVM64: ami-6b6a7d09
      HVMG2: NOT_SUPPORTED
Parameters:
  WorkloadName:
    Description: The Name tag you wish to apply to the workload that will be created
    Type: String
    MinLength: '1'
    MaxLength: '256'
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
Outputs:
  ALBName:
    Description: The name of an ApplicationLoadBalancer
    Value:
      Fn::GetAtt:
      - LB8A12904C
      - LoadBalancerName
    Export:
      Name:
        Fn::Join:
        - ''
        - - albname-
          - Ref: WorkloadName
  S3bucket:
    Description: The name of s3 bucket for CUR
    Value:
      Ref: CURmaster
    Export:
      Name: 
        Fn::Join:
        - ''
        - - s3bucket-
          - Ref: WorkloadName
  BastionHostDNS:
    Description: The name of bastionhost dnS
    Value:
      Fn::GetAtt:
      - BastionHost
      - PublicDnsName
    Export:
      Name: 
        Fn::Join:
        - ''
        - - Bastionhost-
          - Ref: WorkloadName

  ALBDNS:
    Description: The address of an ApplicationLoadBalancer
    Value:
      Fn::GetAtt:
      - LB8A12904C
      - DNSName
    Export:
      Name: 
        Fn::Join:
        - ''
        - - albdnsaddress-
          - Ref: WorkloadName
  ASGName:
    Description: The name of an Autoscaling group
    Value:
      Ref: ASG46ED3070
    Export:
      Name: 
        Fn::Join:
          - ''
          - - asgname-
            - Ref: WorkloadName
  RDSDNS:
    Description: The address of RDS
    Value:
      Fn::GetAtt:
      - ClusterC1063A87
      - Endpoint.Address
    Export:
      Name:
        Fn::Join:
          - ''
          - - rdsaddress-
            - Ref: WorkloadName 
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
    - Fn::Or:
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-east-1
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-northeast-1
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-northeast-2
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-south-1
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-southeast-1
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-southeast-2
      - Fn::Equals:
        - Ref: AWS::Region
        - ca-central-1
      - Fn::Equals:
        - Ref: AWS::Region
        - cn-north-1
      - Fn::Equals:
        - Ref: AWS::Region
        - cn-northwest-1
      - Fn::Equals:
        - Ref: AWS::Region
        - eu-central-1
    - Fn::Or:
      - Fn::Equals:
        - Ref: AWS::Region
        - eu-north-1
      - Fn::Equals:
        - Ref: AWS::Region
        - eu-west-1
      - Fn::Equals:
        - Ref: AWS::Region
        - eu-west-2
      - Fn::Equals:
        - Ref: AWS::Region
        - eu-west-3
      - Fn::Equals:
        - Ref: AWS::Region
        - me-south-1
      - Fn::Equals:
        - Ref: AWS::Region
        - sa-east-1
      - Fn::Equals:
        - Ref: AWS::Region
        - us-east-1
      - Fn::Equals:
        - Ref: AWS::Region
        - us-east-2
      - Fn::Equals:
        - Ref: AWS::Region
        - us-west-1
      - Fn::Equals:
        - Ref: AWS::Region
        - us-west-2
