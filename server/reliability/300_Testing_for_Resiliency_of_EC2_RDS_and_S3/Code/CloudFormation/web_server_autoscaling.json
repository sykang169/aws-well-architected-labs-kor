{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Autoscaled WebServer behind ELB into Three AZ Public and Private VPC",

  "Parameters" : {

    "VPCID" : {
       "Description" : "VPC to tag these servers' names with",
       "Type" : "AWS::EC2::VPC::Id"
    },

    "WebServerSecurityGroups" : {
      "Description" : "Comma separated list of security group IDs for creation of instances",
      "Type" : "List<AWS::EC2::SecurityGroup::Id>"
    },

    "WebLoadBalancerSG" : {
       "Description" : "Security Group ID for the load balancer",
       "Type" : "AWS::EC2::SecurityGroup::Id"
    },

    "WebLoadBalancerSubnets" : {
      "Description" : "Subnets in AZs for LoadBalancer (IGW routed)",
      "Type" : "List<AWS::EC2::Subnet::Id>"
    },

    "WebServerSubnets" : {
      "Description" : "Subnets in AZs for WebServers (private)",
      "Type" : "List<AWS::EC2::Subnet::Id>"
    },

    "WebServerInstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge" ]
    },

    "AvailabilityZones" : {
      "Description" : "Comma delimited list of Availability Zone for Autoscaling",
      "Type" : "List<AWS::EC2::AvailabilityZone::Name>",
      "Default" :  "us-east-2a,us-east-2b,us-east-2c"
    },

    "BootBucketRegion" : {
      "Description" : "Region where the S3 bucket resides that has the bootstrap scripts",
      "Type" : "String",
      "Default" :  "us-east-2"
    },

    "BootBucket" : {
      "Description" : "S3 bucket to download Python boot scripts",
      "Type" : "String"
    },

    "BootPrefix" : {
      "Description" : "Prefix for the object in the bucket (usually looks like a folder location",
      "Type" : "String",
      "Default" : ""
    },

    "BootObject" : {
      "Description" : "Object in Boot Bucket to download and bootstrap from",
      "Type" : "String",
      "Default" : "server.py"
    },

    "WebSiteImage" : {
      "Description" : "URL of the image that will be displayed in the website (from S3 if you wish to test failure of it)",
      "Type" : "String"
    },

    "WebServerAMI" : {
      "Description" : "Latest Amazon AMI available in the region ",
      "Type" : "String"
    },

    "RDSHostName" : {
      "Description" : "DNS Name of RDS host to connect to",
      "Type" : "String"
    },

    "RDSUser" : {
      "Description" : "User in RDS host to connect to",
      "Type" : "String"
    },
  
    "RDSPassword" : {
      "Description" : "Password in RDS host to connect to",
      "Type" : "String",
      "NoEcho" : "true"
    }

  },

  "Resources" : {

    "WebServerRole" : {
      "Metadata" : {
        "License" : "MIT No Attribution:  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
      },
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Statement" : [ {
             "Effect" : "Allow",
             "Principal" : { "Service": [ "ec2.amazonaws.com" ] },
             "Action" : [ "sts:AssumeRole" ]
          } ]
        },
        "Path" : "/",
        "ManagedPolicyArns" : [ "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM" ]
      }
    },

    "WebServerInstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [ { "Ref" : "WebServerRole" } ]
      }
    },

    "WebServerLaunchConfiguration" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "SecurityGroups" : { "Ref" : "WebServerSecurityGroups" },
        "InstanceType" : { "Ref" : "WebServerInstanceType" },
        "ImageId" : { "Ref" : "WebServerAMI" },
        "IamInstanceProfile" : { "Ref" : "WebServerInstanceProfile" },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
              "#!/bin/bash\n",
              "yum -y update\n",
              "amazon-linux-extras install epel\n",
              "yum -y install stress-ng\n",
              "yum -y install tc\n",
              "yum -y install mysql\n",
              "wget https://s3.", { "Ref" : "BootBucketRegion" }, ".amazonaws.com/" , { "Ref" : "BootBucket" }, "/", { "Ref" : "BootPrefix" }, "createIPTable.sql\n",
              "mysql -h ", { "Ref" : "RDSHostName"}, " -u ", { "Ref" : "RDSUser"}, " -p", { "Ref" : "RDSPassword"}, " <createIPTable.sql --silent --force -b 2>stderr.txt\n",  
              "yum install python3 python-virtualenv python-pip -y\n",
              "python3 -m venv /home/ec2-user/venv\n",
              "source /home/ec2-user/venv/bin/activate\n",
              "pip install ec2_metadata\n",
              "pip install pymysql\n",
              "wget https://s3.", { "Ref" : "BootBucketRegion" }, ".amazonaws.com/" , { "Ref" : "BootBucket" }, "/", { "Ref" : "BootPrefix" }, { "Ref" : "BootObject" }, "\n",
              "python3 ", { "Ref" : "BootObject" }, " -u ", { "Ref" : "WebSiteImage" }, " -p 80 -s ", { "Ref" : "RDSUser" }, " -w ", { "Ref" : "RDSPassword"}, " -d iptracker -o ", { "Ref" : "RDSHostName"}, "\n"
            ]]
            }
        }
      }
    },

    "WebLoadBalancerTargetGroup" : {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties" : {
        "HealthCheckIntervalSeconds" : "15",
        "HealthCheckPath" : "/",
        "HealthCheckPort" : "80",
        "HealthCheckProtocol" : "HTTP",
        "HealthCheckTimeoutSeconds" : "2",
        "HealthyThresholdCount" : "2",
        "Matcher" : { "HttpCode" : "200" },
              "Port" : "80",
        "Protocol" : "HTTP",
        "TargetType" : "instance",
        "UnhealthyThresholdCount" : "2",
        "VpcId" : { "Ref" : "VPCID" }
            }
          },

    "WebLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties" : {
        "Name" : "ResiliencyTestLoadBalancer",
        "Scheme" : "internet-facing",
          "SecurityGroups" : [ {"Ref" : "WebLoadBalancerSG" } ],
          "Subnets" : { "Ref": "WebLoadBalancerSubnets" },
          "Type" : "application"
      }
    },

    "WebLoadBalancerListener" : {
      "Type" : "AWS::ElasticLoadBalancingV2::Listener",
      "Properties" : {
        "LoadBalancerArn" : { "Ref" : "WebLoadBalancer" },
        "Port" : "80",
        "Protocol" : "HTTP",
        "DefaultActions" : [
          {
            "TargetGroupArn" : { "Ref" : "WebLoadBalancerTargetGroup" },
            "Type" : "forward"
          }
        ]
      }
    },

    "WebServerAutoscalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : {"Ref" : "AvailabilityZones"},
        "MinSize" : "3",
        "MaxSize" : "3",
        "HealthCheckType" : "ELB",
        "HealthCheckGracePeriod" : "60",
        "LaunchConfigurationName" : {"Ref" : "WebServerLaunchConfiguration" },
        "VPCZoneIdentifier" :  { "Ref" : "WebServerSubnets" },
        "TargetGroupARNs" : [ {"Ref" : "WebLoadBalancerTargetGroup" } ],
        "Tags" : [ 
          { "Key" : "Name", "Value" : { "Fn::Join" : ["", [
              "WebServerforResiliency-", { "Ref" : "VPCID"} ]] }, "PropagateAtLaunch" : "true" }
        ]
      }
    }
  },

  "Outputs" : {

    "WebSiteURL" : {
      "Description" : "URL of ELB",
      "Value" : { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "WebLoadBalancer", "DNSName" ] } ] ] }
    }
  }
}
