AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >-
  You will be billed for the AWS resources used if you create a stack from this
  template.
  Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
  
  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  A copy of the License is located at
  
      https://www.apache.org/licenses/LICENSE-2.0
  
  or in the "license" file accompanying this file. This file is distributed 
  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either 
  express or implied. See the License for the specific language governing 
  permissions and limitations under the License.
Parameters:
  NotificationEmail:
    Type: String
    AllowedPattern: (?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])
    ConstraintDescription: Please enter a valid email.
    Description: The email address to send the list of affected users.
  MinAgeKeysToReport:
    Type: Number
    Default: 30
    MinValue: 0
    Description: The minimum age in days of access keys to include in the report.
  MinAgeKeysToDisable:
    Type: Number
    Default: 0
    MinValue: 0
    Description: The minimum age in days of access keys to disable. Set to '0' to disable this funciton.
  MinAgeKeysToDelete:
    Type: Number
    Default: 0
    MinValue: 0
    Description: The minimum age in days of access keys to delete. Set to '0' to disable this function.
  MinAgeUnusedUsersToReport:
    Type: Number
    Default: 30
    MinValue: 0
    Description: The minimum age in days of unused users to include in the report.
  MinAgeUnusedUsersToDisable:
    Type: Number
    Default: 0
    Description: The minimum age in days of unused users to disable. Set to '0' to disable this funciton.
  MinAgeUnusedUsersToDelete:
    Type: Number
    Default: 0
    MinValue: 0
    Description: The minimum age in days of unused users to delete. Set to '0' to disable this function.
  MinAgeRolesToReport:
    Type: Number
    Default: 30
    MinValue: 0
    Description: The minimum age in days of unused users to include in the report.
  MinAgeRolesToDisable:
    Type: Number
    Default: 0
    Description: The minimum age in days of unused users to disable. Set to '0' to disable this funciton.
  MinAgeRolesToDelete:
    Type: Number
    Default: 0
    MinValue: 0
    Description: The minimum age in days of unused users to delete. Set to '0' to disable this function.
Resources:
  # SNS Topic
  UserCleanupTopic:
    Type: 'AWS::SNS::Topic'
  UserCleanupSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref NotificationEmail
      Protocol: email
      TopicArn: !Ref UserCleanupTopic
# IAM role required for Lambda to access IAM and to send the email from SNS
  UserCleanupLambdaxecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Principal:
              Service:
                lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
        Path: /
        Policies:
          - PolicyDocument:
              Statement:
                - Action:
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                  Effect: Allow
                  Resource: 'arn:aws:logs:*:*:*'
                - Action:
                    - 'iam:DeleteAccessKey'
                    - 'iam:DeleteUser'
                    - 'iam:GetAccessKeyLastUsed'
                    - 'iam:GetUser'
                    - 'iam:ListAccessKeys'
                    - 'iam:ListUsers'
                    - 'iam:UpdateAccessKey'
                    - 'iam:UpdateUser'
                    - 'iam:ListRoles'
                    - 'iam:GenerateServiceLastAccessedDetails'
                    - 'iam:GetServiceLastAccessedDetails'
                    - 'iam:DeleteRole'
                    - 'iam:AttachRolePolicy'
                  Effect: Allow
                  Resource: '*' # Explicit that this includes all users
                - Action:
                  - 'sns:Publish'
                  Effect: Allow
                  Resource: !Ref UserCleanupTopic
              Version: 2012-10-17
            PolicyName: sec-UserCleanupRole
  # Lambda function to audit the credentials
  UserCleanupLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda-iam-user-cleanup.lambda_handler
      Runtime: python2.7
      Role: !GetAtt UserCleanupLambdaxecutionRole.Arn
      Environment:
        Variables:
          MinAgeKeysToReport: !Ref MinAgeKeysToReport
          MinAgeKeysToDisable: !Ref MinAgeKeysToDisable
          MinAgeKeysToDelete: !Ref MinAgeKeysToDelete
          MinAgeUnusedUsersToReport: !Ref MinAgeUnusedUsersToReport
          MinAgeUnusedUsersToDisable: !Ref MinAgeUnusedUsersToDisable
          MinAgeUnusedUsersToDelete: !Ref MinAgeUnusedUsersToDelete
          MinAgeRolesToReport: !Ref MinAgeRolesToReport
          MinAgeRolesToDisable: !Ref MinAgeRolesToDisable
          MinAgeRolesToDelete: !Ref MinAgeRolesToDelete
          TopicTarget: !Ref UserCleanupTopic
      CodeUri: lambda-iam-user-cleanup.py
      Timeout: 300
  # Cloudwatch event to trigger this
  UserCleanupTrigger:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: 'cron(0 12 * * ? *)'
      State: 'ENABLED'
      Targets:
        -
          Arn: !GetAtt UserCleanupLambda.Arn
          Id: 'LambdaTarget'
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref UserCleanupLambda
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt UserCleanupTrigger.Arn
